/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.mapper;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author roxmer
 */
public class MapperUI extends javax.swing.JFrame {

    /**
     * Creates new form MapperUI
     */
    private String refAttr = "";
    private static final String STANDARD_FILE_NAME = "Standard.csv";
    private static final String STANDARD_LIST_VALUES_FILE_NAME = "Standard_List_Values.csv";
    
    public MapperUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    public void readEntityFileInTable(JTable TheTable, JLabel TheLabel, JComboBox TheComboBox){
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            TheLabel.setText(selectedFile.getAbsolutePath());
            
            String csvFile = TheLabel.getText();
            BufferedReader br = null;
            String line = "";
            String separator = (String) TheComboBox.getSelectedItem();
        
            if(("Tab".equals(separator))){
                separator="\t";
            }
        
            String[] term = null;
        
            DefaultTableModel myModel = (DefaultTableModel)TheTable.getModel();

            while(myModel.getRowCount()>0){
                myModel.removeRow(0);
            }
        
            try {
                br = new BufferedReader(new FileReader(csvFile));
                line = br.readLine();
                term = line.split(separator);
                int columnNumber = 1;
                
                for (String str : term) {
                    Object[] RowData = {columnNumber,str};

                    myModel.addRow(RowData);
                    columnNumber++;
                }

            } 
            catch (FileNotFoundException e) {
                e.printStackTrace();
            } 
            catch (IOException e) {
                e.printStackTrace();
            } 
            finally {
                if (br != null) {
                    try {
                            br.close();
                    } 
                    catch (IOException e) {
                            e.printStackTrace();
                    }
                }
            }
        }
    }
    
    
    
    public void readListValuesFileInTable(JTable TheTable, JLabel TheLabel, JComboBox TheComboBox){
        
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            TheLabel.setText(selectedFile.getAbsolutePath());
            
            String csvFile = TheLabel.getText();
            BufferedReader br = null;
            String separator = (String) TheComboBox.getSelectedItem();
            if(("Tab".equals(separator))){
                separator="\t";
            }
        
            String[] term = null;
        
            DefaultTableModel myModel = (DefaultTableModel)TheTable.getModel();
            myModel.setRowCount(0);
            try{
                String line = "";
                
                br = new BufferedReader(new FileReader(csvFile));
                br.readLine();
                while ((line = br.readLine()) != null){
                    term = line.split(separator);
                    Object[] RowData = {term[0],term[1]};
                    myModel.addRow(RowData);
                }
            }
            catch (Exception e) {
                e.printStackTrace();
            }
            finally{
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
   
    
    private void getStandardEntityAttribute(JTable standardTable ){
        int selRow = standardTable.getSelectedRow();
        refAttr = (String) standardTable.getValueAt(selRow, 1);
    }
    
    private void getStandardListValues(JTable standardTable) {
        int selRow = standardTable.getSelectedRow();
        refAttr = (String) standardTable.getValueAt(selRow, 1);
    }
    
    private void setStandardEntityAttribute(JTable localTable) {                               
        if (refAttr != ""){
          int selRow = localTable.getSelectedRow(); 
          localTable.setValueAt(refAttr, selRow, 2);
        }
        refAttr="";
    }
    
    
    private void setStandardListValues(JTable localTable) {                               
        if (refAttr != ""){
          int selRow = localTable.getSelectedRow(); 
          localTable.setValueAt(refAttr, selRow, 2);
        }
        refAttr="";
    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jTabbedPaneMain = new javax.swing.JTabbedPane();
        jPanelEntity = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        ComboSeparatorEntity = new javax.swing.JComboBox();
        jButtonBrowseEntity = new javax.swing.JButton();
        LabelEntityFile = new javax.swing.JLabel();
        ComboEntity = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableStandardAttr = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TableLocalAttr = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButtonSaveEntity = new javax.swing.JButton();
        jLabelEntityFile = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanelList = new javax.swing.JPanel();
        jPanelEntity1 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        ComboSeparatorList = new javax.swing.JComboBox();
        jButtonBrowseListValues = new javax.swing.JButton();
        LabelListFile = new javax.swing.JLabel();
        ComboList = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        TableStandardValue = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        TableLocalValue = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jButtonSaveValue = new javax.swing.JButton();
        jLabelListFile = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jPanelMap = new javax.swing.JPanel();
        jPanelEntity2 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        LabelMapFile = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TableEntityMap = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        TableListMap = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jButtonSaveMap = new javax.swing.JButton();
        jLabelMapper2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setPreferredSize(new java.awt.Dimension(899, 50));

        jLabel16.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 51, 153));
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Mapper v 1.0");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel16)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneMain.setForeground(new java.awt.Color(0, 51, 153));
        jTabbedPaneMain.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N

        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Select separator used in the file: ");

        ComboSeparatorEntity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ",", ";", "|", "Tab" }));
        ComboSeparatorEntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboSeparatorEntityActionPerformed(evt);
            }
        });

        jButtonBrowseEntity.setText("Browse...");
        jButtonBrowseEntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseEntityActionPerformed(evt);
            }
        });

        LabelEntityFile.setText("Local File");
        LabelEntityFile.setName("LabelEntityFile"); // NOI18N

        ComboEntity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboEntity.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboEntityItemStateChanged(evt);
            }
        });
        ComboEntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboEntityActionPerformed(evt);
            }
        });

        jLabel10.setText("Select the entity to be mapped:");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelEntityFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboEntity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboSeparatorEntity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBrowseEntity)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(ComboSeparatorEntity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseEntity)
                    .addComponent(ComboEntity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LabelEntityFile)
                .addContainerGap())
        );

        TableStandardAttr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entity", "Attribute", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableStandardAttr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getStandardEntityAttribute(evt);
            }
        });
        jScrollPane1.setViewportView(TableStandardAttr);

        TableLocalAttr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column No.", "Attribute", "Standard Attribute"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableLocalAttr.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setStandardEntityAttribute(evt);
            }
        });
        jScrollPane2.setViewportView(TableLocalAttr);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel1.setPreferredSize(new java.awt.Dimension(0, 50));

        jButtonSaveEntity.setBackground(new java.awt.Color(153, 255, 153));
        jButtonSaveEntity.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonSaveEntity.setForeground(new java.awt.Color(0, 51, 153));
        jButtonSaveEntity.setText("Save Entity Map");
        jButtonSaveEntity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveEntityActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabelEntityFile, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 421, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSaveEntity, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabelEntityFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButtonSaveEntity, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel2.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 51, 153));
        jLabel2.setText("Standard Attributes");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 51, 153));
        jLabel3.setText("Local Attributes");

        javax.swing.GroupLayout jPanelEntityLayout = new javax.swing.GroupLayout(jPanelEntity);
        jPanelEntity.setLayout(jPanelEntityLayout);
        jPanelEntityLayout.setHorizontalGroup(
            jPanelEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
            .addGroup(jPanelEntityLayout.createSequentialGroup()
                .addGroup(jPanelEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanelEntityLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEntityLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addContainerGap())
                    .addComponent(jScrollPane2)))
        );
        jPanelEntityLayout.setVerticalGroup(
            jPanelEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEntityLayout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(1, 1, 1)
                .addGroup(jPanelEntityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPaneMain.addTab("Entitties", jPanelEntity);

        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel4.setText("Select separator used in the file: ");

        ComboSeparatorList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ",", ";", "|", "Tab" }));
        ComboSeparatorList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboSeparatorListActionPerformed(evt);
            }
        });

        jButtonBrowseListValues.setText("Browse...");
        jButtonBrowseListValues.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBrowseListValuesActionPerformed(evt);
            }
        });

        LabelListFile.setText("Local File");
        LabelListFile.setName("LabelEntityFile"); // NOI18N

        ComboList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        ComboList.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ComboListItemStateChanged(evt);
            }
        });
        ComboList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboListActionPerformed(evt);
            }
        });

        jLabel11.setText("Select the List to be mapped:");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(LabelListFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ComboSeparatorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonBrowseListValues)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ComboSeparatorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBrowseListValues)
                    .addComponent(ComboList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(LabelListFile)
                .addContainerGap())
        );

        TableStandardValue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "List", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableStandardValue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                getStandardListValues(evt);
            }
        });
        jScrollPane3.setViewportView(TableStandardValue);

        TableLocalValue.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "List", "Local Value", "Standard Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableLocalValue.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setStandardListValues(evt);
            }
        });
        jScrollPane4.setViewportView(TableLocalValue);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 50));

        jButtonSaveValue.setBackground(new java.awt.Color(153, 255, 153));
        jButtonSaveValue.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonSaveValue.setForeground(new java.awt.Color(0, 51, 153));
        jButtonSaveValue.setText("Save List Values Map");
        jButtonSaveValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveListValuesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabelListFile, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSaveValue, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabelListFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButtonSaveValue, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 51, 153));
        jLabel5.setText("Standard List Values");

        jLabel6.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 51, 153));
        jLabel6.setText("Local List Values");

        javax.swing.GroupLayout jPanelEntity1Layout = new javax.swing.GroupLayout(jPanelEntity1);
        jPanelEntity1.setLayout(jPanelEntity1Layout);
        jPanelEntity1Layout.setHorizontalGroup(
            jPanelEntity1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
            .addGroup(jPanelEntity1Layout.createSequentialGroup()
                .addGroup(jPanelEntity1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 477, Short.MAX_VALUE)
                    .addGroup(jPanelEntity1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEntity1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEntity1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addContainerGap())
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)))
        );
        jPanelEntity1Layout.setVerticalGroup(
            jPanelEntity1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEntity1Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEntity1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6))
                .addGap(1, 1, 1)
                .addGroup(jPanelEntity1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanelListLayout = new javax.swing.GroupLayout(jPanelList);
        jPanelList.setLayout(jPanelListLayout);
        jPanelListLayout.setHorizontalGroup(
            jPanelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 961, Short.MAX_VALUE)
            .addGroup(jPanelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelEntity1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelListLayout.setVerticalGroup(
            jPanelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(jPanelListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanelEntity1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneMain.addTab("List Values", jPanelList);

        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        LabelMapFile.setText("Local File");
        LabelMapFile.setName("LabelEntityFile"); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(LabelMapFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(40, Short.MAX_VALUE)
                .addComponent(LabelMapFile)
                .addContainerGap())
        );

        TableEntityMap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Entity", "Standard Attribute", "Local Attribute"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableEntityMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableEntityMapGetSCMIABIS(evt);
            }
        });
        jScrollPane5.setViewportView(TableEntityMap);

        TableListMap.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "List", "Standard Value", "Local Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        TableListMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableListMapsetSCMIABIS(evt);
            }
        });
        jScrollPane6.setViewportView(TableListMap);

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel5.setPreferredSize(new java.awt.Dimension(0, 50));

        jButtonSaveMap.setBackground(new java.awt.Color(153, 255, 153));
        jButtonSaveMap.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButtonSaveMap.setForeground(new java.awt.Color(0, 51, 153));
        jButtonSaveMap.setText("Save Final Map");
        jButtonSaveMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveMapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabelMapper2, javax.swing.GroupLayout.PREFERRED_SIZE, 526, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 421, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButtonSaveMap, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabelMapper2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jButtonSaveMap, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel8.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 51, 153));
        jLabel8.setText("Entity Map");

        jLabel9.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 51, 153));
        jLabel9.setText("List Value Map");

        javax.swing.GroupLayout jPanelEntity2Layout = new javax.swing.GroupLayout(jPanelEntity2);
        jPanelEntity2.setLayout(jPanelEntity2Layout);
        jPanelEntity2Layout.setHorizontalGroup(
            jPanelEntity2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 961, Short.MAX_VALUE)
            .addGroup(jPanelEntity2Layout.createSequentialGroup()
                .addGroup(jPanelEntity2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanelEntity2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel8)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEntity2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelEntity2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addContainerGap())
                    .addComponent(jScrollPane6)))
        );
        jPanelEntity2Layout.setVerticalGroup(
            jPanelEntity2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelEntity2Layout.createSequentialGroup()
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelEntity2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jLabel9))
                .addGap(1, 1, 1)
                .addGroup(jPanelEntity2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanelMapLayout = new javax.swing.GroupLayout(jPanelMap);
        jPanelMap.setLayout(jPanelMapLayout);
        jPanelMapLayout.setHorizontalGroup(
            jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMapLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanelEntity2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );
        jPanelMapLayout.setVerticalGroup(
            jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jPanelMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanelMapLayout.createSequentialGroup()
                    .addGap(0, 0, 0)
                    .addComponent(jPanelEntity2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(0, 0, 0)))
        );

        jTabbedPaneMain.addTab("Map result", jPanelMap);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 966, Short.MAX_VALUE)
            .addComponent(jTabbedPaneMain)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPaneMain))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private List<String> initEntity(String pathToFile){
        
        jLabelEntityFile.setText(pathToFile);
        BufferedReader fileReader = null;
        String DELIMITER = ";";
        DefaultTableModel tableModelEntity = (DefaultTableModel)TableStandardAttr.getModel();
        DefaultTableModel tableModelEntityMap = (DefaultTableModel)TableEntityMap.getModel();
        List<String> entityNameList = new ArrayList<String>();
        String[] term = null;
        try{
            String line = "";
            
            fileReader = new BufferedReader(new FileReader(pathToFile));
             
            String entity = "";
            fileReader.readLine();
            
            while ((line = fileReader.readLine()) != null){
                
                term = line.split(DELIMITER);
                Object[] RowData = {term[0],term[1],term[2]};
                Object[] RowDataMap = {term[0],term[1]};
                
                if(!entity.equalsIgnoreCase(term[0])){
                    entity = term[0];
                    entityNameList.add(term[0]);
                }
                
                if ("Sample".equals(term[0])){
                    tableModelEntity.addRow(RowData);
                }
                
                
                tableModelEntityMap.addRow(RowDataMap);

            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally{
            try {
                fileReader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return entityNameList;
    }
    
    
    private List<String> initList(String pathToFile){
        
        jLabelListFile.setText(pathToFile);
        BufferedReader fileReader = null;
        String DELIMITER = ";";
        DefaultTableModel tableModelListValues = (DefaultTableModel)TableStandardValue.getModel();
        DefaultTableModel tableModelListValuesMap = (DefaultTableModel)TableListMap.getModel();
        List<String> listValuesNameList = new ArrayList<String>();
        String[] term = null;
        try{
            String line = "";
            
            fileReader = new BufferedReader(new FileReader(pathToFile));
             
            String entity = "";
            fileReader.readLine();
            
            while ((line = fileReader.readLine()) != null){
                
                term = line.split(DELIMITER);
                Object[] RowData = {term[0],term[1]};
                
                if(!entity.equalsIgnoreCase(term[0])){
                    entity = term[0];
                    listValuesNameList.add(term[0]);
                }
                
                if ("Sex".equals(term[0])){
                    tableModelListValues.addRow(RowData);
                }
                
                tableModelListValuesMap.addRow(RowData);
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally{
            try {
                fileReader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return listValuesNameList;
    }
    
    private void populateEntityTableFromStandardFile(String entity){
        
        String pathToFile;
        String current = System.getProperty("user.dir");
        
        pathToFile = current+"\\"+STANDARD_FILE_NAME;
        
        BufferedReader fileReader = null;
        String DELIMITER = ";";
        DefaultTableModel tableModelEntity = (DefaultTableModel)TableStandardAttr.getModel();
        tableModelEntity.setRowCount(0);
        
        String[] term = null;
        try{
            String line = "";
            
            fileReader = new BufferedReader(new FileReader(pathToFile));
            fileReader.readLine();
            while ((line = fileReader.readLine()) != null){
                term = line.split(DELIMITER);
                Object[] RowData = {term[0],term[1],term[2]};
                if (entity.equals(term[0])){
                    tableModelEntity.addRow(RowData);
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally{
            try {
                fileReader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    
    private void populateListValuesTableFromStandardFile(String listValue){
        
        String pathToFile;
        String current = System.getProperty("user.dir");
        
        pathToFile = current+"\\"+STANDARD_LIST_VALUES_FILE_NAME;
        
        BufferedReader fileReader = null;
        String DELIMITER = ";";
        DefaultTableModel tableModelListValues = (DefaultTableModel)TableStandardValue.getModel();
        tableModelListValues.setRowCount(0);
        
        String[] term = null;
        try{
            String line = "";
            
            fileReader = new BufferedReader(new FileReader(pathToFile));
            fileReader.readLine();
            while ((line = fileReader.readLine()) != null){
                term = line.split(DELIMITER);
                Object[] RowData = {term[0],term[1]};
                if (listValue.equals(term[0])){
                    tableModelListValues.addRow(RowData);
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        finally{
            try {
                fileReader.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    
    private void mapEntityAttributeResult(JTable  TableLocalAttr, JComboBox ComboEntity){
        
        DefaultTableModel tableModelLocalAttr = (DefaultTableModel)TableLocalAttr.getModel();
        DefaultTableModel tableModelEntityMap = (DefaultTableModel)TableEntityMap.getModel();
        String entity = ComboEntity.getSelectedItem().toString();
        
        for(int k = 0 ; k < tableModelEntityMap.getRowCount() ; k++){
            if(entity.equals(tableModelEntityMap.getValueAt(k, 0)) && tableModelEntityMap.getValueAt(k,2) != null){
                tableModelEntityMap.setValueAt(null, k, 2);
            }
        }
        
        for (int i = 0 ; i < tableModelLocalAttr.getRowCount() ; i++){
            if(tableModelLocalAttr.getValueAt(i,2) != null){
                System.out.println( tableModelLocalAttr.getValueAt(i,2));
                for(int j = 0; j < tableModelEntityMap.getRowCount(); j++){
                    if(entity.equals(tableModelEntityMap.getValueAt(j, 0)) && tableModelEntityMap.getValueAt(j, 1).equals(tableModelLocalAttr.getValueAt(i,2))){
                        tableModelEntityMap.setValueAt(tableModelLocalAttr.getValueAt(i,1), j, 2);
                    }
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, ComboEntity.getSelectedItem().toString()+" Entity has been mapped!");
        
    }
    
    
    
    private void mapListValuesResult(JTable  TableLocalValue, JComboBox ComboList){
        DefaultTableModel tableModelLocalValue = (DefaultTableModel)TableLocalValue.getModel();
        DefaultTableModel tableModelListMap = (DefaultTableModel)TableListMap.getModel();
        String attribute = ComboList.getSelectedItem().toString();
        
        for(int k = 0 ; k < tableModelListMap.getRowCount() ; k++){
            if(attribute.equals(tableModelListMap.getValueAt(k, 0)) && tableModelListMap.getValueAt(k,2) != null){
                tableModelListMap.setValueAt(null, k, 2);
            }
        }
        
        for (int i = 0 ; i < tableModelLocalValue.getRowCount() ; i++){
            if(tableModelLocalValue.getValueAt(i,2) != null){
                System.out.println( tableModelLocalValue.getValueAt(i,2));
                for(int j = 0; j < tableModelListMap.getRowCount(); j++){
                    if(attribute.equals(tableModelListMap.getValueAt(j, 0)) && tableModelListMap.getValueAt(j, 1).equals(tableModelLocalValue.getValueAt(i,2))){
                        tableModelListMap.setValueAt(tableModelLocalValue.getValueAt(i,1), j, 2);
                    }
                }
            }
        }
        
        JOptionPane.showMessageDialog(null, ComboList.getSelectedItem().toString()+" Attribute has been mapped!");
        
    }
    
    
    
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        jTabbedPaneMain.setSelectedIndex(0);
        
        String pathToFile;
        String current = System.getProperty("user.dir");
        
        pathToFile = current+"\\"+STANDARD_FILE_NAME;
        ComboEntity.setModel(new javax.swing.DefaultComboBoxModel(initEntity(pathToFile).toArray()));
        
        pathToFile = current+"\\"+STANDARD_LIST_VALUES_FILE_NAME;
        ComboList.setModel(new javax.swing.DefaultComboBoxModel(initList(pathToFile).toArray()));
        
    }//GEN-LAST:event_formWindowOpened

    private void jButtonSaveEntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveEntityActionPerformed
        mapEntityAttributeResult(TableLocalAttr, ComboEntity);
    }//GEN-LAST:event_jButtonSaveEntityActionPerformed

    private void setStandardEntityAttribute(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setStandardEntityAttribute
        setStandardEntityAttribute(TableLocalAttr);
    }//GEN-LAST:event_setStandardEntityAttribute

    private void getStandardEntityAttribute(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getStandardEntityAttribute
        getStandardEntityAttribute(TableStandardAttr);
    }//GEN-LAST:event_getStandardEntityAttribute

    private void jButtonBrowseEntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseEntityActionPerformed
        readEntityFileInTable(TableLocalAttr, LabelEntityFile, ComboSeparatorEntity);
    }//GEN-LAST:event_jButtonBrowseEntityActionPerformed

    private void ComboSeparatorEntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboSeparatorEntityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboSeparatorEntityActionPerformed

    private void ComboEntityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboEntityActionPerformed
        populateEntityTableFromStandardFile(ComboEntity.getSelectedItem().toString());
    }//GEN-LAST:event_ComboEntityActionPerformed

    private void ComboSeparatorListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboSeparatorListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboSeparatorListActionPerformed

    private void jButtonBrowseListValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBrowseListValuesActionPerformed
        readListValuesFileInTable(TableLocalValue, LabelListFile, ComboSeparatorList);
    }//GEN-LAST:event_jButtonBrowseListValuesActionPerformed

    private void ComboListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboListActionPerformed
        populateListValuesTableFromStandardFile(ComboList.getSelectedItem().toString());
    }//GEN-LAST:event_ComboListActionPerformed

    private void getStandardListValues(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_getStandardListValues
        getStandardListValues(TableStandardValue);
    }//GEN-LAST:event_getStandardListValues

    private void setStandardListValues(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setStandardListValues
        setStandardListValues(TableLocalValue);
    }//GEN-LAST:event_setStandardListValues

    private void jButtonSaveListValuesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveListValuesActionPerformed
        mapListValuesResult(TableLocalValue, ComboList);
    }//GEN-LAST:event_jButtonSaveListValuesActionPerformed

    private void TableEntityMapGetSCMIABIS(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableEntityMapGetSCMIABIS
        // TODO add your handling code here:
    }//GEN-LAST:event_TableEntityMapGetSCMIABIS

    private void TableListMapsetSCMIABIS(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableListMapsetSCMIABIS
        // TODO add your handling code here:
    }//GEN-LAST:event_TableListMapsetSCMIABIS

    private void jButtonSaveMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveMapActionPerformed
        saveMapToFile();
    }//GEN-LAST:event_jButtonSaveMapActionPerformed

    private void ComboEntityItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboEntityItemStateChanged
        DefaultTableModel tableModelLocalAttr = (DefaultTableModel)TableLocalAttr.getModel();
        tableModelLocalAttr.setRowCount(0);
    }//GEN-LAST:event_ComboEntityItemStateChanged

    private void ComboListItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ComboListItemStateChanged
        //DefaultTableModel tableModelLocalValue = (DefaultTableModel)TableLocalValue.getModel();
        //tableModelLocalValue.setRowCount(0);
    }//GEN-LAST:event_ComboListItemStateChanged

    
    private void saveMapToFile(){
        System.out.println("saveMapToFile method called");
        String current = System.getProperty("user.dir");
        String mapFileDestination = current+"//Map.csv";
        File mappingFile = new File(mapFileDestination);
        FileWriter fw = null;
        try {
            mappingFile.createNewFile();
            LabelMapFile.setText(mappingFile.getAbsolutePath());
            fw = new FileWriter(mappingFile);
            writeEntityMapToFile(TableEntityMap, fw);
            writeListValuesMapToFile(TableListMap, fw);
            JOptionPane.showMessageDialog(null, "The map file has been saved to the location "+mappingFile.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(MapperUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        finally {
            if(fw != null)
                try {
                    fw.close();
                } catch (IOException ex) {
                    Logger.getLogger(MapperUI.class.getName()).log(Level.SEVERE, null, ex);
                }
        } 
    }
    
    
    private void writeEntityMapToFile(JTable jTable, FileWriter fw) throws IOException{
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();

        int nRow = dtm.getRowCount();
        
        StringBuffer miabisEntityName, miabisAttributeName;
        
        for (int i = 0 ; i < nRow ; i++){
                
            miabisEntityName = new StringBuffer();
            miabisAttributeName = new StringBuffer();
            String[] entityArray = dtm.getValueAt(i,0).toString().split("\\s");
            int count = 0;
            
            if(dtm.getValueAt(i,2) != null){
                for (String str : entityArray) {
                    char[] stringArray = str.trim().toLowerCase().toCharArray();
                    if(count > 0){
                        stringArray[0] = Character.toUpperCase(stringArray[0]);
                    }
                    str = new String(stringArray);
                    miabisEntityName.append(str);
                    count++;
                }
                
                fw.write(miabisEntityName.toString());
                fw.write(".");
                String[] attributeArray = dtm.getValueAt(i,1).toString().split("\\s");
                for(int j = 0; j < attributeArray.length; j++){
                    char[] stringArray = attributeArray[j].trim().toLowerCase().toCharArray();
                    if(j > 0){
                        stringArray[0] = Character.toUpperCase(stringArray[0]);
                    }
                    miabisAttributeName.append(stringArray);
                }
                fw.write(miabisAttributeName.toString());
                fw.write("=");
                fw.write(dtm.getValueAt(i,2).toString());
                fw.write(System.lineSeparator());
            }
        }
        

    }
    
    
    private void writeListValuesMapToFile(JTable jTable, FileWriter fw) throws IOException{
        DefaultTableModel dtm = (DefaultTableModel) jTable.getModel();

        int nRow = dtm.getRowCount();
        
        StringBuffer listName;
        
        for (int i = 0 ; i < nRow ; i++){
                
            listName = new StringBuffer();
            String[] strArr = dtm.getValueAt(i,0).toString().split("\\s");
            int count = 0;
            
            if(dtm.getValueAt(i,2) != null){
                for (String str : strArr) {
                    char[] stringArray = str.trim().toLowerCase().toCharArray();
                    if(count > 0){
                        stringArray[0] = Character.toUpperCase(stringArray[0]);
                    }
                    str = new String(stringArray);
                    listName.append(str);
                    count++;
                }
                
                fw.write("list");
                fw.write(".");
                fw.write(listName.toString());
                fw.write(".");
                List<String> strings = Arrays.asList(dtm.getValueAt(i,1).toString().split("\\s"));
                Iterator<String> it = strings.iterator();
                while(it.hasNext()){
                    fw.write(it.next());
                    if(it.hasNext()){
                        fw.write("\\ ");
                    }
                    
                }
                fw.write("=");
                fw.write(dtm.getValueAt(i,2).toString());
                fw.write(System.lineSeparator());
            }
        }
        

    }
    
    
     /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapperUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapperUI().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox ComboEntity;
    private javax.swing.JComboBox ComboList;
    private javax.swing.JComboBox ComboSeparatorEntity;
    private javax.swing.JComboBox ComboSeparatorList;
    private javax.swing.JLabel LabelEntityFile;
    private javax.swing.JLabel LabelListFile;
    private javax.swing.JLabel LabelMapFile;
    private javax.swing.JTable TableEntityMap;
    private javax.swing.JTable TableListMap;
    private javax.swing.JTable TableLocalAttr;
    private javax.swing.JTable TableLocalValue;
    private javax.swing.JTable TableStandardAttr;
    private javax.swing.JTable TableStandardValue;
    private javax.swing.JButton jButtonBrowseEntity;
    private javax.swing.JButton jButtonBrowseListValues;
    private javax.swing.JButton jButtonSaveEntity;
    private javax.swing.JButton jButtonSaveMap;
    private javax.swing.JButton jButtonSaveValue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelEntityFile;
    private javax.swing.JLabel jLabelListFile;
    private javax.swing.JLabel jLabelMapper2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jPanelEntity;
    private javax.swing.JPanel jPanelEntity1;
    private javax.swing.JPanel jPanelEntity2;
    private javax.swing.JPanel jPanelList;
    private javax.swing.JPanel jPanelMap;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTabbedPane jTabbedPaneMain;
    // End of variables declaration//GEN-END:variables
}
